# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: sam-app
      StageName: prod
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False # Otherwise OPTIONS preflight request will also require Authorization token but browsers do not include headers on pre flight requests
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        # AllowOrigin: !GetAtt AppBucket.WebsiteURL

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  PuppeteerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: puppeteer
      Description: Puppeteer
      ContentUri: layers/puppeteer
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: GET

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /{id}
            Method: GET

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: POST

  screencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/screencap.handler
      Description: Takes a screencap of a given url
      # Policies:
      #   # Give Create/Read/Update/Delete Permissions to the UsersTable
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref UsersTable
      # Environment:
      #   Variables:
      #     TABLE_NAME: !Ref UsersTable
      Layers:
        - !Ref PuppeteerLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencap
            Method: POST

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Users
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: sam-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes: # attributes that can be used instead of the username
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      LambdaConfig:
        PreSignUp: !GetAtt preSignupFunction.Arn

  preSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: preSignup.handler
      Description: Auto confirm signups

  AllowCognitoAccessLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref preSignupFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt UserPool.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: sam-user-pool-client
      GenerateSecret: false

  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: serverless-app-frontend
      WebsiteConfiguration:
        IndexDocument: index.html

  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - "s3:GetObject"
          Effect: Allow
          Principal: "*"
          Resource: !Join
            - ""
            - - !GetAtt AppBucket.Arn
              - /*

Outputs:
  WebsiteUrl:
    Value: !GetAtt AppBucket.WebsiteURL
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UserPoolID:
    Value: !Ref UserPool
  UserPoolClientID:
    Value: !Ref CognitoUserPoolClient
