AWSTemplateFormatVersion: 2010-09-09
Description: >-
  serverlens

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    AllowedValues:
      - prod
      - local
    Default: prod
    Description: Enter prod|local. Default is prod

Conditions:
  LocalDeploy: !Equals [!Ref Env, local]

Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: serverlens
      StageName: prod
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False # Otherwise OPTIONS preflight request will also require Authorization token but browsers do not include headers on pre flight requests
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin:
          !If [
            LocalDeploy,
            "'http://localhost:8080'",
            !Sub "'${AppBucket.WebsiteURL}'",
          ]
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
      MethodSettings:
        - HttpMethod: POST
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 10
          ResourcePath: /screencaps

  EntitiesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: entities
      Description: Entities
      ContentUri: layers/entities
      CompatibleRuntimes:
        - nodejs14.x

  PuppeteerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: puppeteer
      Description: Puppeteer
      ContentUri: layers/puppeteer
      CompatibleRuntimes:
        - nodejs14.x

  ScreencapStatesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: screencap-states
      Description: Screencap States
      ContentUri: layers/screencap-states
      CompatibleRuntimes:
        - nodejs14.x

  listScreencapsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/list-screencaps
      Handler: index.handler
      Description: Lists screencaps
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable
          SCREENCAPS_BUCKET_PREFIX: !Sub "https://${ScreencapBucket.DomainName}"
      Layers:
        - !Ref ScreencapStatesLayer
        - !Ref EntitiesLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps
            Method: GET

  deleteScreencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/delete-screencap
      Handler: index.handler
      Description: Deletes screencap with provided id from authenticated user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps/{id}
            Method: DELETE

  screencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/screencap
      Handler: index.handler
      Description: Schedules screencap
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable
      Layers:
        - !Ref ScreencapStatesLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps
            Method: POST

  bookmarkScreencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/bookmark-screencap
      Handler: index.handler
      Description: Bookmarks screencap
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable
      Layers:
        - !Ref ScreencapStatesLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps/{id}/bookmark
            Method: POST

  unbookmarkScreencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/unbookmark-screencap
      Handler: index.handler
      Description: Deletes screencap bookmark
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable
      Layers:
        - !Ref ScreencapStatesLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps/{id}/bookmark
            Method: DELETE

  processScreencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/process-screencap
      Handler: index.handler
      Description: Takes a screencap of a given url
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ScreencapBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DBTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ScreencapDLQ.QueueName
      Environment:
        Variables:
          BUCKET_NAME: !Ref ScreencapBucket
          TABLE_NAME: !Ref DBTable
      MemorySize: 512
      Layers:
        - !Ref ScreencapStatesLayer
        - !Ref PuppeteerLayer
      Events:
        ScreencapItemInserted:
          Type: DynamoDB
          Properties:
            BatchSize: 10
            StartingPosition: TRIM_HORIZON # Oldest -> Newest order processing
            Stream: !GetAtt DBTable.StreamArn
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt ScreencapDLQ.Arn
            BisectBatchOnFunctionError: true
            FunctionResponseTypes:
              - ReportBatchItemFailures # Enables partial success responses for record batches
            MaximumRetryAttempts: 1
            MaximumBatchingWindowInSeconds: 5 # Maximum amount of time to gather records before invoking the function
            FilterCriteria:
              Filters:
                - Pattern: '{ "eventName": [ "INSERT" ], "dynamodb": { "NewImage": { "SK": { "S": [ { "prefix": "SCREENCAP#PENDING#" } ] }, "Website": { "S": [ {"exists": true } ] } } } }' # Only when a new PENDING state item is inserted

  postDeleteScreencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/post-delete
      Handler: index.handler
      Description: Deletes screencap image from bucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ScreencapBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref ScreencapBucket
      Events:
        ScreencapItemDeleted:
          Type: DynamoDB
          Properties:
            BatchSize: 10
            StartingPosition: TRIM_HORIZON
            Stream: !GetAtt DBTable.StreamArn
            BisectBatchOnFunctionError: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
            MaximumRetryAttempts: 1
            MaximumBatchingWindowInSeconds: 5
            FilterCriteria:
              Filters:
                - Pattern: '{ "eventName": [ "REMOVE" ], "dynamodb": { "OldImage": { "SK": { "S": [ { "prefix": "SCREENCAP#COMPLETED#" } ] } } } }' # Only when a completed screencap was deleted

  ScreencapDLQ:
    Type: AWS::SQS::Queue

  DBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: Serverlens
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: BookmarkedAt
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: BookmarksGSI
          KeySchema:
            - AttributeName: PK
              KeyType: HASH
            - AttributeName: BookmarkedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

  preSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Auto confirm signups
      CodeUri: ./src/handlers/pre-signup
      Handler: index.handler

  postConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handles post confirmation event
      CodeUri: ./src/handlers/post-confirmation
      Handler: index.handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DBTable
      Layers:
        - !Ref ScreencapStatesLayer
      Environment:
        Variables:
          TABLE_NAME: !Ref DBTable

  AllowCognitoAccessPreSignupLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref preSignupFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt UserPool.Arn

  AllowCognitoAccessPostConfirmationLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref postConfirmationFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt UserPool.Arn

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    Properties:
      UserPoolName: serverlens-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes: # attributes that can be used instead of the username
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      LambdaConfig:
        PreSignUp: !GetAtt preSignupFunction.Arn
        PostConfirmation: !GetAtt postConfirmationFunction.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: serverlens-user-pool-client
      GenerateSecret: false

  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: serverlens-frontend
      WebsiteConfiguration:
        IndexDocument: index.html

  ScreencapBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: serverlens-screencaps
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - !If [
                  LocalDeploy,
                  http://localhost:8080,
                  !GetAtt AppBucket.WebsiteURL,
                ]
            AllowedMethods:
              - "GET"
            AllowedHeaders:
              - "*"

  ScreencapBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ScreencapBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "${ScreencapBucket.Arn}/*"
            Principal: "*"

  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - "s3:GetObject"
          Effect: Allow
          Principal: "*"
          Resource: !Join
            - ""
            - - !GetAtt AppBucket.Arn
              - /*

Outputs:
  FrontendUrl:
    Value: !GetAtt AppBucket.WebsiteURL
  BackendEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UserPoolID:
    Value: !Ref UserPool
  UserPoolClientID:
    Value: !Ref CognitoUserPoolClient
