AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-app

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: sam-app
      StageName: prod
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False # Otherwise OPTIONS preflight request will also require Authorization token but browsers do not include headers on pre flight requests
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        # AllowOrigin: !GetAtt AppBucket.WebsiteURL

  PuppeteerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: puppeteer
      Description: Puppeteer
      ContentUri: layers/puppeteer
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  ScreencapStatesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: screencap-states
      Description: Screencap States
      ContentUri: layers/screencap-states
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  listScreencapsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/list-screencaps.handler
      Description: Lists screencaps
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ScreencapTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ScreencapTable
      Layers:
        - !Ref ScreencapStatesLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps
            Method: GET

  deleteScreencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-screencap.handler
      Description: Deletes screencap with provided date from authenticated user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ScreencapTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ScreencapTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps/{date}
            Method: DELETE

  screencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/screencap.handler
      Description: Schedules screencap
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ScreencapTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ScreencapTable
      Layers:
        - !Ref ScreencapStatesLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /screencaps
            Method: POST

  processScreencapFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/process-screencap.handler
      Description: Takes a screencap of a given url
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ScreencapBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ScreencapTable
      Environment:
        Variables:
          BUCKET_NAME: !Ref ScreencapBucket
          TABLE_NAME: !Ref ScreencapTable
      MemorySize: 512
      Layers:
        - !Ref ScreencapStatesLayer
        - !Ref PuppeteerLayer
      Events:
        ScreencapItemInserted:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream: !GetAtt ScreencapTable.StreamArn
            FilterCriteria:
              Filters:
                - Pattern: '{ "eventName": [ "INSERT" ], "dynamodb": { "NewImage": { "Date": { "S": [ { "prefix": "PENDING#" } ] } } } }' # Only when a new PENDING state item is inserted

  ScreencapTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Screencaps
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Date
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  preSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: preSignup.handler
      Description: Auto confirm signups

  AllowCognitoAccessLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref preSignupFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt UserPool.Arn

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: sam-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes: # attributes that can be used instead of the username
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      LambdaConfig:
        PreSignUp: !GetAtt preSignupFunction.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: sam-user-pool-client
      GenerateSecret: false

  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: serverless-app-frontend
      WebsiteConfiguration:
        IndexDocument: index.html

  ScreencapBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: serverless-app-screencaps
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - "GET"
            AllowedHeaders:
              - "*"

  ScreencapBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ScreencapBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "${ScreencapBucket.Arn}/*"
            Principal: "*"

  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - "s3:GetObject"
          Effect: Allow
          Principal: "*"
          Resource: !Join
            - ""
            - - !GetAtt AppBucket.Arn
              - /*

Outputs:
  FrontendUrl:
    Value: !GetAtt AppBucket.WebsiteURL
  BackendEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UserPoolID:
    Value: !Ref UserPool
  UserPoolClientID:
    Value: !Ref CognitoUserPoolClient
  ScreencapBucketUrl:
    Value: !Sub "https://${ScreencapBucket.DomainName}"
